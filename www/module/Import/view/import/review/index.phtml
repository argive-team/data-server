<?php $this->headLink()
    ->prependStylesheet("//ajax.googleapis.com/ajax/libs/jqueryui/1.8.9/themes/base/jquery-ui.css")
    ->prependStylesheet($this->basePath("plupload-2.3.1/js/jquery.ui.plupload/css/jquery.ui.plupload.css"))
; ?>

<?php
// production
$this->headScript()
    ->prependFile($this->basePath("plupload-2.3.1/js/jquery.ui.plupload/jquery.ui.plupload.js"))
    ->prependFile($this->basePath("plupload-2.3.1/js/plupload.full.min.js"))
    ->prependFile("//ajax.googleapis.com/ajax/libs/jqueryui/1.10.2/jquery-ui.min.js")
; ?>

<?php 
// -- debug 
// $this->headScript()
//    ->prependFile($this->basePath("plupload-2.3.1/js/moxie.js"))
//    ->prependFile($this->basePath("plupload-2.3.1/js/plupload.dev.js"))
//    ->prependFile($this->basePath("plupload-2.3.1/js/jquery.ui.plupload/jquery.ui.plupload.js"))
?>

<form method="post" action="">
	<div id="uploader">
		<p>Your browser doesn't have Flash, Silverlight or HTML5 support.</p>
	</div>
</form>

<pre id="console" style="margin-top: 10px; height: 300px; overflow: auto"></pre>

<script type="text/javascript">
$(function() {
	
	// Setup html5 version
	$("#uploader").plupload({
		// General settings
		runtimes : 'html5,flash,silverlight,html4',
		url : '/import/review/upload',
		max_file_count: 20,
		chunk_size: '1mb',
		rename : true,
		dragdrop: true,
		
		filters : {
			// Maximum file size
			max_file_size : '100mb',
			// Specify what files to browse for
			mime_types: [
				{title : "CSV files", extensions : "csv"}
			]
		},
		
		flash_swf_url : 'plupload-2.3.1/js/Moxie.swf',
		silverlight_xap_url : 'plupload-2.3.1/js/Moxie.xap',
		
		// Post init events, bound after the internal events
		init : {
			PostInit: function() {
				// Called after initialization is finished and internal event handlers bound
				log('[PostInit]');
			},

			Browse: function(up) {
                // Called when file picker is clicked
                log('[Browse]');
            },

            Refresh: function(up) {
                // Called when the position or dimensions of the picker change
                log('[Refresh]');
            },
 
            StateChanged: function(up) {
                // Called when the state of the queue is changed
                log('[StateChanged]', up.state == plupload.STARTED ? "STARTED" : "STOPPED");
            },
 
            QueueChanged: function(up) {
                // Called when queue is changed by adding or removing files
                log('[QueueChanged]');
            },

			OptionChanged: function(up, name, value, oldValue) {
				// Called when one of the configuration options is changed
				log('[OptionChanged]', 'Option Name: ', name, 'Value: ', value, 'Old Value: ', oldValue);
			},

			BeforeUpload: function(up, file) {
				// Called right before the upload for a given file starts, can be used to cancel it if required
				log('[BeforeUpload]', 'File: ', file);
			},
 
            UploadProgress: function(up, file) {
                // Called while file is being uploaded
                log('[UploadProgress]', 'File:', file, "Total:", up.total);
            },

			FileFiltered: function(up, file) {
				// Called when file successfully files all the filters
                log('[FileFiltered]', 'File:', file);
			},
 
            FilesAdded: function(up, files) {
                // Called when files are added to queue
                log('[FilesAdded]');
 
                plupload.each(files, function(file) {
                    log('  File:', file);
                });
            },
 
            FilesRemoved: function(up, files) {
                // Called when files are removed from queue
                log('[FilesRemoved]');
 
                plupload.each(files, function(file) {
                    log('  File:', file);
                });
            },
 
            FileUploaded: function(up, file, info) {
                // Called when file has finished uploading
                log('[FileUploaded] File:', file, "Info:", info);
            },
 
            ChunkUploaded: function(up, file, info) {
                // Called when file chunk has finished uploading
                log('[ChunkUploaded] File:', file, "Info:", info);
            },

			UploadComplete: function(up, files) {
				// Called when all files are either uploaded or failed
                log('[UploadComplete]');

				// Redirect to import page
				$(location).attr('href', '/import/review/import');
			},

			Destroy: function(up) {
				// Called when uploader is destroyed
                log('[Destroy] ');
			},
 
            Error: function(up, args) {
                // Called when error occurs
                log('[Error] ', args);

				$('#uploader').plupload('notify', 'error', args['response']);
            }
		}		
	});
	
	function log() {
		var str = "";

		plupload.each(arguments, function(arg) {
			var row = "";

			if (typeof(arg) != "string") {
				plupload.each(arg, function(value, key) {
					// Convert items in File objects to human readable form
					if (arg instanceof plupload.File) {
						// Convert status to human readable
						switch (value) {
							case plupload.QUEUED:
								value = 'QUEUED';
								break;
							
							case plupload.UPLOADING:
								value = 'UPLOADING';
		                        break;
		
							case plupload.FAILED:
								value = 'FAILED';
								break;

							case plupload.DONE:
								value = 'DONE';
								break;
		                }
		            }
					
					if (typeof(value) != "function") {
						row += (row ? ', ' : '') + key + '=' + value;
					}
				});

				str += row + " ";
			} else {
				str += arg + " ";
			}
		});
		
		var log = document.getElementById('console');
		log.innerHTML += str + "\n";
	}
	
	// Handle the case when form was submitted before uploading has finished
	$('#form').submit(function(e) {
		// Files in queue upload them first
		if ($('#uploader').plupload('getFiles').length > 0) {

			// When all files are uploaded submit form
			$('#uploader').on('complete', function() {
				$('#form')[0].submit();
			});

			$('#uploader').plupload('start');
		} else {
			alert("You must have at least one file in the queue.");
		}
		return false; // Keep the form from submitting
	});
});
</script>
